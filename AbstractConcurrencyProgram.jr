import edu.ucdavis.jr.JR;
import edu.ucdavis.jr.QuiescenceRegistrationException;

import java.util.concurrent.ThreadLocalRandom;

public abstract class AbstractConcurrencyProgram {

    // Maximum time in milliseconds that is randomly added to base waiting time to simulate randomness
    private static final int RANDOM_ADDITIONNAL_TIME_MILLIS = 3;
    
    // Program duration in seconds
    private static final int PROGRAM_DURATION_SECONDS = 10;

    // Process that stops the program after a certain time
    private static process EndProgram {
        variableWait(PROGRAM_DURATION_SECONDS * 1000);
        JR.exit(1);
    }

    // Called when the program is in trouble !
    private static op void unexpectedEnd() {
        System.err.println("PROCESSES ARE EITHER IN A DEADLOCK OR ALL DEAD!!!");
    }
    
    // Called for every concurrent program
    protected AbstractConcurrencyProgram() {
        // Register function to call when things went wrong
        try {
            JR.registerQuiescenceAction(unexpectedEnd);
        } catch (QuiescenceRegistrationException e) {
            e.printStackTrace();
            JR.exit(1);
        }
    }
    
    // Encapsulates the waiting process
    protected static void variableWait(int baseTimeMillis) {
        try {
            // Wait for specified time plus some more milliseconds to simulate real-world randomness
            Thread.sleep(baseTimeMillis + ThreadLocalRandom.current().nextInt(RANDOM_ADDITIONNAL_TIME_MILLIS + 1));
        } catch (InterruptedException e) {
            System.err.println("A thread was interrupted during sleep");
            JR.exit(1);
        }
    }
}
