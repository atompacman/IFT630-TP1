import edu.ucdavis.jr.JR;

public final class SemaphorePhilosophers extends AbstractPhilosophers {

    // Mutex
    private final sem mutex = 1;
    
    // Conditional variables
    private cap void() canEat[] = new cap void()[5];

    // Called when a philosopher process starts
    @Override
    protected void initPhilosopherProcess(int id) {
        canEat[id] = new sem(0);
    }
    
    // Called when a philosopher wants to start eating
    @Override
    protected void pickUpForks(int id) {
        P(mutex);
        if (states[id] == HUNGRY) {
            System.out.println("FAIL1");
            JR.exit(1);
        }
        setState(id, HUNGRY);
        if (states[id] != HUNGRY) {
            System.out.println("FAIL2");
            JR.exit(1);
        }
        variableWait(100);
        if (states[id] != HUNGRY) {
            System.out.println("FAIL3");
            JR.exit(1);
        }
        eatIfPossible(id);
        V(mutex);
        
        if (states[id] == HUNGRY) {
            P(canEat[id]);
            if (states[id] == HUNGRY) {
                System.out.println("WTF!!");
            }
        }
    }
    
    // Called when a philosopher wants to stop eating
    @Override
    protected void putDownForks(int id) {
        P(mutex);
        setState(id, THINKING);
        eatIfPossible((id + 4) % 5);
        eatIfPossible((id + 1) % 5);
        V(mutex);
    }
    
    // Called to make a philosopher eat if possible
    private void eatIfPossible(int id) {
        // Check if neighbours are not eating (forks are free) and that current philosopher is actually hungry
        if (states[(id + 1) % 5] != EATING && states[(id + 4) % 5] != EATING && states[id] == HUNGRY) {
            setState(id, EATING);
            V(canEat[id]);
        }
    }
    
    // Program entry point
    public static void main(String[] args) {
        registerUnexpectedEndAction();
        new SemaphorePhilosophers();
    }
}
