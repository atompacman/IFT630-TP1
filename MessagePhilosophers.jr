import edu.ucdavis.jr.JR;

public final class MessagePhilosophers extends AbstractPhilosophers {

    // Philosopher process' private channels
    private final cap void() channels[] = new cap void()[5];
    
    // Communication channel between philosophers and the philosopher manager
    private op void askOrReturnMutex(cap void());
    
    // Process that controls access to critical sections (mutex but with message)
    private process MutexManager {
        // The queue of private channels of processes waiting to acquire the mutex
        Queue<cap void()> waitingForMutex = new LinkedList<cap void()>();
        
        // The private channel of the process currently holding the mutex
        cap void() mutexHolder = null;
    
        // Holds the private channel of the calling processes
        cap void() calling = null;
    
        while (true) {
            // Wait for a processes to enter or exit a critical section
            receive askOrReturnMutex(calling);
            
            System.out.println("\n askOrReturnMutex manager \n");
            if (calling == null) {
                for (int i = 0; i < 5; ++i) {
                    if (channels[i] == null) {
                        System.out.println("\n GOOBBY \n");
                    }
                }
                System.out.println("\n DAYUM \n");
                JR.exit(1);
            }
            
            // If it's the mutex holder that is exiting a critical section
            if (mutexHolder == calling) {
                // If there is nobody waiting for the mutex
                if (waitingForMutex.isEmpty()) {
                    mutexHolder = null;
                } else {
                    // Give the mutex to the next processes in the queue
                    mutexHolder = waitingForMutex.poll();
                    // Call back the calling processes through its private channel
                    send mutexHolder();
                }
            // If nobody currently has the mutex
            } else if (mutexHolder == null) {
                mutexHolder = calling;
                // Call the processes through its private channel
                send mutexHolder();
            // If another processes has the mutex
            } else {
                // Process goes in a queue, waiting for the mutex to be free
                // This is tagged by the compiler as an unsafe operation... why ?
                waitingForMutex.add(calling);
            }
        }
    }

    // Called when a philosopher process starts
    @Override
    protected void initPhilosopherProcess(int id) {
        channels[id] = new op void();
    }
    
    // Called when a philosopher wants to start eating
    @Override
    protected void pickUpForks(int id) {
        // Ask for mutex
        send askOrReturnMutex(channels[id]);
        
        // Wait for manager to give mutex
        receive channels[id]();
        
        setState(id, HUNGRY);
        eatIfPossible(id);
        
        // Give the mutex back
        send askOrReturnMutex(channels[id]);
        
        if (states[id] != EATING) {
            receive channels[id]();
        }
    }
    
    // Called when a philosopher wants to stop eating
    @Override
    protected void putDownForks(int id) {
        // Ask for mutex
        send askOrReturnMutex(channels[id]);
        
        // Wait for manager to give mutex
        receive channels[id]();
        
        setState(id, THINKING);
        eatIfPossible((id + 4) % 5);
        eatIfPossible((id + 1) % 5);
        
        // Give the mutex back
        send askOrReturnMutex(channels[id]);
    }
    
    // Called to make a philosopher eat if possible
    private void eatIfPossible(int id) {       
        // Check if neighbours are not eating (forks are free) and that current philosopher is actually hungry
        if (states[(id + 1) % 5] != EATING && states[(id + 4) % 5] != EATING && states[id] == HUNGRY) {
            setState(id, EATING);
            send channels[id]();
        }
    }
    
    // Program entry point
    public static void main(String[] args) {
        registerUnexpectedEndAction();
        new MessagePhilosophers();
    }
}
