import edu.ucdavis.jr.JR;

import java.util.Queue;
import java.util.LinkedList;

public final class MessagePhilosophers extends AbstractPhilosophers {

    // Philosopher process' private channels
    private final cap void() channels[] = new cap void()[5];
    
    // Manager mutex assignation
    private final MutexManager manager;
    
    public MessagePhilosophers(MutexManager manager) {
        this.manager = manager;
    }
    
    // Called when a philosopher process starts
    @Override
    protected void initPhilosopherProcess(int id) {
        channels[id] = new op void();
    }
    
    // Called when a philosopher wants to start eating
    @Override
    protected void pickUpForks(int id) {
        // Ask for mutex
        send manager.askOrReturnMutex(channels[id]);
        
        // Wait for manager to give mutex
        receive channels[id]();
        
        setState(id, HUNGRY);
        eatIfPossible(id);
        
        // Give the mutex back
        send manager.askOrReturnMutex(channels[id]);
        
        // Wait for the ok to eat
        receive channels[id]();
    }
    
    // Called when a philosopher wants to stop eating
    @Override
    protected void putDownForks(int id) {
        // Ask for mutex
        send manager.askOrReturnMutex(channels[id]);
        
        // Wait for manager to give mutex
        receive channels[id]();
        
        setState(id, THINKING);
        eatIfPossible((id + 4) % 5);
        eatIfPossible((id + 1) % 5);
        
        // Give the mutex back
        send manager.askOrReturnMutex(channels[id]);
    }
    
    // Called to make a philosopher eat if possible
    private void eatIfPossible(int id) {       
        // Check if neighbours are not eating (forks are free) and that current philosopher is actually hungry
        if (states[(id + 1) % 5] != EATING && states[(id + 4) % 5] != EATING && states[id] == HUNGRY) {
            setState(id, EATING);
            send channels[id]();
        }
    }
    
    // Program entry point
    public static void main(String[] args) {
        new MessagePhilosophers(new MutexManager());
    }
}
